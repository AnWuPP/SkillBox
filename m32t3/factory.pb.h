// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_factory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_factory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_factory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_factory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_factory_2eproto;
class Factory;
struct FactoryDefaultTypeInternal;
extern FactoryDefaultTypeInternal _Factory_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Factory* Arena::CreateMaybeMessage<::Factory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Factory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Factory) */ {
 public:
  inline Factory() : Factory(nullptr) {}
  ~Factory() override;
  explicit constexpr Factory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Factory(const Factory& from);
  Factory(Factory&& from) noexcept
    : Factory() {
    *this = ::std::move(from);
  }

  inline Factory& operator=(const Factory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Factory& operator=(Factory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Factory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Factory* internal_default_instance() {
    return reinterpret_cast<const Factory*>(
               &_Factory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Factory& a, Factory& b) {
    a.Swap(&b);
  }
  inline void Swap(Factory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Factory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Factory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Factory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Factory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Factory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Factory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Factory";
  }
  protected:
  explicit Factory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdrressFieldNumber = 2,
    kNameFieldNumber = 3,
    kTypeWorkFieldNumber = 4,
    kCreatedYearFieldNumber = 1,
    kInterEcoFieldNumber = 5,
  };
  // required string adrress = 2;
  bool has_adrress() const;
  private:
  bool _internal_has_adrress() const;
  public:
  void clear_adrress();
  const std::string& adrress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adrress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adrress();
  PROTOBUF_NODISCARD std::string* release_adrress();
  void set_allocated_adrress(std::string* adrress);
  private:
  const std::string& _internal_adrress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adrress(const std::string& value);
  std::string* _internal_mutable_adrress();
  public:

  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type_work = 4;
  bool has_type_work() const;
  private:
  bool _internal_has_type_work() const;
  public:
  void clear_type_work();
  const std::string& type_work() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_work(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_work();
  PROTOBUF_NODISCARD std::string* release_type_work();
  void set_allocated_type_work(std::string* type_work);
  private:
  const std::string& _internal_type_work() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_work(const std::string& value);
  std::string* _internal_mutable_type_work();
  public:

  // required int32 created_year = 1;
  bool has_created_year() const;
  private:
  bool _internal_has_created_year() const;
  public:
  void clear_created_year();
  int32_t created_year() const;
  void set_created_year(int32_t value);
  private:
  int32_t _internal_created_year() const;
  void _internal_set_created_year(int32_t value);
  public:

  // optional bool inter_eco = 5;
  bool has_inter_eco() const;
  private:
  bool _internal_has_inter_eco() const;
  public:
  void clear_inter_eco();
  bool inter_eco() const;
  void set_inter_eco(bool value);
  private:
  bool _internal_inter_eco() const;
  void _internal_set_inter_eco(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Factory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adrress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_work_;
  int32_t created_year_;
  bool inter_eco_;
  friend struct ::TableStruct_factory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Factory

// required int32 created_year = 1;
inline bool Factory::_internal_has_created_year() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Factory::has_created_year() const {
  return _internal_has_created_year();
}
inline void Factory::clear_created_year() {
  created_year_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Factory::_internal_created_year() const {
  return created_year_;
}
inline int32_t Factory::created_year() const {
  // @@protoc_insertion_point(field_get:Factory.created_year)
  return _internal_created_year();
}
inline void Factory::_internal_set_created_year(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  created_year_ = value;
}
inline void Factory::set_created_year(int32_t value) {
  _internal_set_created_year(value);
  // @@protoc_insertion_point(field_set:Factory.created_year)
}

// required string adrress = 2;
inline bool Factory::_internal_has_adrress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Factory::has_adrress() const {
  return _internal_has_adrress();
}
inline void Factory::clear_adrress() {
  adrress_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Factory::adrress() const {
  // @@protoc_insertion_point(field_get:Factory.adrress)
  return _internal_adrress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Factory::set_adrress(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 adrress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Factory.adrress)
}
inline std::string* Factory::mutable_adrress() {
  std::string* _s = _internal_mutable_adrress();
  // @@protoc_insertion_point(field_mutable:Factory.adrress)
  return _s;
}
inline const std::string& Factory::_internal_adrress() const {
  return adrress_.Get();
}
inline void Factory::_internal_set_adrress(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  adrress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Factory::_internal_mutable_adrress() {
  _has_bits_[0] |= 0x00000001u;
  return adrress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Factory::release_adrress() {
  // @@protoc_insertion_point(field_release:Factory.adrress)
  if (!_internal_has_adrress()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = adrress_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (adrress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    adrress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Factory::set_allocated_adrress(std::string* adrress) {
  if (adrress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  adrress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adrress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (adrress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    adrress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Factory.adrress)
}

// required string name = 3;
inline bool Factory::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Factory::has_name() const {
  return _internal_has_name();
}
inline void Factory::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Factory::name() const {
  // @@protoc_insertion_point(field_get:Factory.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Factory::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Factory.name)
}
inline std::string* Factory::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Factory.name)
  return _s;
}
inline const std::string& Factory::_internal_name() const {
  return name_.Get();
}
inline void Factory::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Factory::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Factory::release_name() {
  // @@protoc_insertion_point(field_release:Factory.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Factory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Factory.name)
}

// optional string type_work = 4;
inline bool Factory::_internal_has_type_work() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Factory::has_type_work() const {
  return _internal_has_type_work();
}
inline void Factory::clear_type_work() {
  type_work_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Factory::type_work() const {
  // @@protoc_insertion_point(field_get:Factory.type_work)
  return _internal_type_work();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Factory::set_type_work(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 type_work_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Factory.type_work)
}
inline std::string* Factory::mutable_type_work() {
  std::string* _s = _internal_mutable_type_work();
  // @@protoc_insertion_point(field_mutable:Factory.type_work)
  return _s;
}
inline const std::string& Factory::_internal_type_work() const {
  return type_work_.Get();
}
inline void Factory::_internal_set_type_work(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_work_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Factory::_internal_mutable_type_work() {
  _has_bits_[0] |= 0x00000004u;
  return type_work_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Factory::release_type_work() {
  // @@protoc_insertion_point(field_release:Factory.type_work)
  if (!_internal_has_type_work()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = type_work_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_work_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_work_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Factory::set_allocated_type_work(std::string* type_work) {
  if (type_work != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_work_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_work,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_work_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_work_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Factory.type_work)
}

// optional bool inter_eco = 5;
inline bool Factory::_internal_has_inter_eco() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Factory::has_inter_eco() const {
  return _internal_has_inter_eco();
}
inline void Factory::clear_inter_eco() {
  inter_eco_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Factory::_internal_inter_eco() const {
  return inter_eco_;
}
inline bool Factory::inter_eco() const {
  // @@protoc_insertion_point(field_get:Factory.inter_eco)
  return _internal_inter_eco();
}
inline void Factory::_internal_set_inter_eco(bool value) {
  _has_bits_[0] |= 0x00000010u;
  inter_eco_ = value;
}
inline void Factory::set_inter_eco(bool value) {
  _internal_set_inter_eco(value);
  // @@protoc_insertion_point(field_set:Factory.inter_eco)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_factory_2eproto
